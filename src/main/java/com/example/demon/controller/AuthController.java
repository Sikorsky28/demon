package com.example.demon.controller;

import com.example.demon.dto.LoginRequest;
import com.example.demon.model.User;
import com.example.demon.service.UserService;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import java.io.Serializable;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/auth") // üîπ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç API
@CrossOrigin(origins = "http://localhost:63342") // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
public class AuthController {
    @Autowired
    private UserService userService;

    // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @PostMapping("/register")
    public ResponseEntity<Map<String, String>> register(@RequestBody User user) {
        boolean success = userService.register(user);
        return success
                ? ResponseEntity.ok(Map.of("message", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"))
                : ResponseEntity.badRequest().body(Map.of("message", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"));
    }

    // ‚úÖ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @PostMapping("/login")
    public ResponseEntity<Map<String, String>> login(@RequestBody LoginRequest request) {
        Optional<User> user = userService.findByUsername(request.getUsername());

        if (user.isPresent() && user.get().getPassword().equals(request.getPassword())) {
            return ResponseEntity.ok(Map.of("token", "fake-jwt-token"));
        }

        return ResponseEntity.status(401).body(Map.of("message", "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"));
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @GetMapping("/user/{username}")
    public ResponseEntity<Map<String, Object>> getUser(@PathVariable String username) {
        Optional<User> user = userService.findByUsername(username);

        return user.map(u -> ResponseEntity.ok(Map.of(
                "username", u.getUsername(),
                "age", (Object) u.getAge(), // üîπ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ Object
                "weight", (Object) u.getWeight(),
                "activityLevel", u.getActivityLevel()
        ))).orElseGet(() -> ResponseEntity.status(404).body(Map.of("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")));
    }
}